/*!
    Zoom 1.7.21
    license: MIT
    http://www.jacklmoore.com/zoom
*/
(function($) {
  var defaults = {
    url: false,
    callback: false,
    target: false,
    duration: 120,
    on: 'mouseover',
    touch: true,
    onZoomIn: false,
    onZoomOut: false,
    magnify: 1
  };

  $.zoom = function(target, source, img, magnify) {
    var targetHeight, targetWidth, sourceHeight, sourceWidth, xRatio, yRatio, offset, $target = $(target),
      position = $target.css('position'),
      $source = $(source),
      $img = $(img),
      $clone = $img.clone(),
      triggered = false;

    // If a url wasn't specified, look for an image element.
    if (!$img.is('img')) {
      $img = $img.find('img');
    }

    // Calculate the native (maximum) dimensions.
    var zoom = function() {
      var photoWidth, photoHeight, r;
      $target.removeClass('zoom-in');
      if (!$clone.attr('style')) {
        $clone.css('visibility', 'hidden').appendTo('body');
        photoWidth = $clone.width();
        photoHeight = $clone.height();
        $clone.attr('style', '');
        $clone.appendTo($target);
      } else {
        photoWidth = $clone.width();
        photoHeight = $clone.height();
      }

      // The bounding box.
      targetHeight = $target.height();
      targetWidth = $target.width();

      // The ratio of the bounding box to the native photo dimensions.
      xRatio = (photoWidth / $source.width());
      yRatio = (photoHeight / $source.height());

      // If the native photo is smaller than the bounding box, upscale it to fit.
      if (xRatio <= 1 && yRatio <= 1) {
        r = magnify;
      } else if (xRatio > yRatio) {
        r = (targetWidth / photoWidth) * magnify;
      } else {
        r = (targetHeight / photoHeight) * magnify;
      }

      $img.width(photoWidth * r);
      $img.height(photoHeight * r);
      offset = $img.offset();
    };

    var zoomIn = function() {
      $target.addClass('zoom-in');
      if (triggered === false) {
        triggered = true;
        if ($.isFunction(defaults.onZoomIn)) {
          defaults.onZoomIn.call($img);
        }
      }
    };

    var zoomOut = function() {
      $target.removeClass('zoom-in');
      if (triggered === true) {
        triggered = false;
        if ($.isFunction(defaults.onZoomOut)) {
          defaults.onZoomOut.call($img);
        }
      }
    };

    // Mouse events.
    if (defaults.on === 'mouseover') {
      $target.on('mouseenter.zoom', function() {
        zoom();
        zoomIn();
      }).on('mouseleave.zoom', function() {
        zoomOut();
      }).on('mousemove.zoom', function(e) {
        var mouse = {
          x: e.pageX,
          y: e.pageY
        };

        var zoomX = (mouse.x - offset.left);
        var zoomY = (mouse.y - offset.top);

        $img.css({
          left: (zoomX * -xRatio + targetWidth / 2),
          top: (zoomY * -yRatio + targetHeight / 2)
        });
      });
    } else if (defaults.on === '